import React from 'react';

const BrokenGamification = (props) => {

    return (
        <article>
            <h3>How I Ruined My Boss's Attempt At Gamification</h3>
            <p className='lighter'><i>(This article is still being edited and formatted, but in the meantime, please feel free to read it.)</i></p>
            <p><a href='https://en.wikipedia.org/wiki/Gamification'>Gamification</a> is... <i>tricky.</i></p>
            <p>I love games, in general, and in all their forms. Chess. Videogames. Sports. Card games. Logic puzzles. Just absolutely love 'em!</p>
            <h4>Why Am I Even Typing?</h4>
            <p>Once upon a time, I graduated college with a degree in <b>economics</b> - a field that's all about that sweet, sweet <i>cost benefit analysis.</i> I loved studying the field. It's right there, smack-dab in the middle of my wheelhouse. Being able to analyze options and actions to see their positive and negative output is important not only in playing games, but also in <b>designing</b> them. <i>(It also makes me insufferable when it comes to talking about policy, but that's a story for another time.)</i></p>
            <p>One of the core requirements that all students of economics go through is, at the very least, an introductory course on <a href='https://www.britannica.com/science/game-theory'>game theory</a>. Now, game theory isn't about playing games, really - you could call it "<a href='https://plato.stanford.edu/entries/decision-theory/'>decision theory</a>, but with multiple actors". It's about navigating a maze of options and discovering an <a href='https://www.investopedia.com/terms/n/nash-equilibrium.asp'>equilibrium</a>, or... finding that an equilibrium <i>isn't</i> possible.</p>
            <p>So, I studied game theory, like a good student. In game theory, you look at multiple actors, the "games" they are playing, and their "<a href='https://xplaind.com/953905/payoff-matrix'>payoff matrices</a>". You start to see how, many times, the results of "the game" are predictable. Humans are creatures of habit and least resistance - they go where the greatest payoff is for the least effort. We all like to think we are the outlier, but in reality... we aren't.</p>
            <p>(Well, unless you're an outlier, I guess. But, uhh, anyway...)</p>
            <p>The thing about academic game theory is that your payouts are generally well-known. You don't have to try and guess at what they might be, because you focus on the theory and the math that solve these games, instead. You're not concerned about whether the values at some location on the matrix are accurate or not - you just assume that they are.</p>
            <p>My opinion of gamification in the workplace is... <i>low.</i></p>
            <h4>There's Already A Game</h4>
            <p>It isn't that gamification can't improve things. It can! It <i>absolutely</i> can! Gamification can improve things... in very specific, narrow applications.</p>
            <p>The overall problem I find with gamification in the workplace, however, is that it is an abstract game layered on top of another abstract game - a game that we call "employment". Attempts at gamification are games we are forcing people to play, on top of a game that <b>they are already playing!</b> The math gets... <i>weird</i>. It becomes much harder to predict outcomes. You're dealing with "<a href='https://en.wikipedia.org/wiki/Higher-order_function'>higher order functions</a>", and those start to get tangled up together. Once these higher order functions start to enter into the mix, <i>determining payoff matrices becomes a hell of a lot harder</i>. And if you can't easily determine how the game pays out to its players, well... You're just rolling the dice with your time spent building and implementing the game. It might all be wasted effort in the end if it isn't developed the right way.</p>
            <p><a href='https://en.wikipedia.org/wiki/Abstraction'>Abstractions</a> can be useful. By training, personal interests, and employment, I am a programmer. Programmers deal primarily in various types of abstractions. They take a set a business rules, and turn them into sets and systems of <b>logical operations</b> - some of which don't necessarily look much like those business rules. The additional abstraction is usually meant to be an efficiency increase of some type - otherwise, <i>you wouldn't need programmers!</i> You would just have the business rules, and operate by <i>those</i> instead!</p>
            <p>To argue the need for gamification is to argue that <i>the abstract game "employment" isn't functioning</i>, or that you don't have the ability to change payoffs in the employment game. It's to argue that you need to correct the employment game with another abstract layer. It's declaring your intent to "fix the incentives" of employment - to "<i>fix the payoff matrix</i>".</p>
            <p>I've heard it argued as "increasing productivity", but the truth is that <b>if your employment system is functioning, you should be able to increase productivity based on that alone.</b> If your employment system is correct - i.e., you are paying the correct wage and are able to find the right people for the jobs you need done - you will be in some "equilibrium", hovering around your theoretical "<a href='https://en.wikipedia.org/wiki/Marginal_utility'>marginal effectiveness</a>". The traditional theory is that higher wages and benefits equal higher output (up until a point, i.e., marginal utility), for a number of reasons. You attract better employees. Your employees are happier. Your employees will want to leave your organization less, which saves you on hiring costs. People will hear about the better working conditions at your company and give you a better hiring pool. And wages and benefits are only <i>one</i> factor that goes into the equation of employment and productivity! General organizational structure, information flow between groups within a company, the societal culture you exist within with regards to "work ethic" - you could look at so many different factors, your head would spin.</p>
            <h4>The Time And Simplicity Trap</h4>
            <p>And this is the part that gets tricky, you see. It becomes so difficult to try to figure out the existing "game" of employment and the incentives that go into it that we develop an intense desire to <b>simplify</b> it. And not only is it <i>difficult to figure out</i>, it also <i>takes a while for changes to have any measurable effect</i>. You won't see any changes from a changed pay scale until you've hired a bunch of new people and they've been around for a while. How do you know you're making the right changes? "Wouldn't it be great if we could just create a simple set of incentives that we could implement <i>right now</i>, incentives that we could tweak and pull on to get our company's productivity <i>to the level that we think it should be?</i>" we say to ourselves. "Well, I read about gamification a while back... <i>Let's give that a try!</i>"</p>
            <p>Make no mistake about it, this is a <b>heavy</b> topic. Entire libraries exist about this kind of stuff. Political campaigns spending hundreds of millions of dollars live and die on the <i>opinions</i> surrounding theories about employment and incentive structures.</p>
            <p>This article is only a blog post, of course. I will focus in on one very particular topic, gamification in the workplace, and I'll only be able to scratch the surface of that topic. To go any deeper would require a lot of graph paper, a good bit of calculus and linear algebra, and a thesis defense. And at the end of it all, <i>I would just have some academic theory to talk about</i>, not a <b>real-world use case.</b></p>
            <h4>So, About That Real-World Use Case...</h4>
            <p>A few years ago, I was working as a support developer for a company. One of the things I was <b>very</b> enthusiastic about was creating help documentation for users.</p>
            <p>I often ended up with quite a few tickets every day that went, "<i>How do I do THING with the software?</i>" Answering this type of question wasn't my primary responsibility, but it was one of many, and <b>it often took a lot of time to respond to those tickets when I ran into them</b>. I had to open up the software, load up some test data, re-read the question because it was written a bit vague and using colloquialisms I wasn't familiar with, click through a bunch of pages or screens, type in a lot of words, write all of these steps down while making sure I didn't miss anything in the process... You get the picture. I was supporting the software, but I wasn't a <a href='https://en.wikipedia.org/wiki/Power_user'>power user</a>, after all. I was a software developer.</p>
            <p>Because of these tickets, I started writing a wiki-style "help center" of documents. These documents had steps that people could take to resolve errors or issues that they ran into. They had easy-to-follow, step-by-step instructions on how to do certain activities that weren't intuitive.</p>
            <p>So, each time I got a ticket with a new question that could be resolved directly by the user, I would write up the help document, and send them the link. I would include common phrases or statements in the searchable text of the document so that when users wanted to find a document, it would usually be the first one in the list of results. I spent a lot of time refining and editing these documents based on feedback from the users who I sent them to. The feedback was constructive and positive.</p>
            <h4>Finding Equilibrium</h4>
            <p>For a while, it created a bit of an extra workload, but after a month or so it started to <b>pay off</b> for me. <i>Less</i> of these tickets were entering the queue. The ones that did make it through were <i>quickly</i> answered. I not only became a power user from exploring the software more, but I was being bathed in the words that our users used in their day-to-day workflows. I knew a lot about electronic medical records and nursing, by that point.</p>
            <p>I was <i>naturally incentivized</i> to do this activity. It <i>saved me a lot of time</i> in the long run. Instead of writing the same answer over and over for users, and instead of them having to go through the whole support help desk process, <b>they could just find the answer themselves</b>. They'd find the answer quickly and they'd be happier for it. They even got to see their questions impacting the generation of these help documents in real time, with updates pushed out to them by the end of the day (or sooner). They felt like they were a part of improving the user experience of the software due to their questions.</p>
            <p>Our payoff matrices had sent us to the place where we were all benefiting each other. We were "in equilibrium and maximizing our utility", to use basic economic terms.</p>
            <p>My rating from user surveys was 9.4/10, which to this day I am still very proud of. It meant I was on to something with the way I approached the support work on the user's end. I felt accomplished knowing that users were being helped by my actions, and were happy with my performance. They felt like they were being supported, and they felt like their questions were helping both themselves and their colleagues.</p>
            <p>Win-win situations are the ultimate moves in game theory. It's where you always end up, assuming there is a path available to you to get there together.</p>
            <p>Anyway, back to gamification. That's what this post is about.</p>
            <h4>It's Game Time, Baby</h4>
            <p>At some point, someone introduced a gamification strategy to the organization. There were a number of issues with the approach taken. I don't fault anyone for this. "Making a game" is as abstract and herculean a task as any a human could engage in. The simplest view when it comes to gamification is something like... "Add points to things, people will compete, productivity will increase." That seems easy, doesn't it? Add points and profit from the game. Isn't that a win-win?</p>
            <p>The problem in this particular case was two-fold:</p>
            <p>First, the points didn't count towards anything tangible. You just had a score total displayed every month or so. It wasn't really a big deal. No one was getting performance reviews because they didn't hit some target number. It was just a point system layered on top of the things that you completed in your daily workflow. It didn't mean anything at all, in the long run. There were little badges. It was a cute distraction.</p>
            <p>And yet, it was a distraction...</p>
            <p>The problem with assigning points to people is that it implies a lot of things. It implies value. It implies worth. It implies productivity. It implies competition and winners and losers. People wouldn't assign points to things if those points didn't mean anything. It's one of the reasons so many organizations try to inhibit employees discussing their pay rates and salaries with each other - if person A is doing the same job as person B, and they're both comparable in results, but they're being paid 20% more... what does that MEAN? Salaries are "points" in the abstraction called the "employment game". Sure, they're points that have spending power in the real world, and that gives them real world meaning and consequences... but they're still points. They still have OTHER meaning based on their assignment. In some cases it means preferential treatment. In other cases it means seniority. In others, it means one of the parties was simply a better negotiator.</p>
            <p>Points ALWAYS have other meaning when they're shown to people. Goodhart's law applies.</p>
            <h4>Estimating Efforts: Pareto Strikes Back</h4>
            <p>Back to our point system: one issue was the value placed on making and updating documentation. In general - and in an awful lot of organizations - it's hard to get people to work on creating and updating proper documentation. What could be a better way to create an incentive to get documentation done than to gamify the process a bit, right? Add points, people will compete, productivity will increase. And since documentation isn't done often, let's make them worth a lot! That will really incentivize people to get them done!</p>
            <p>Well... I was writing a LOT of documentation compared to everyone else. The scoring worked out in such a way that I had an order of magnitude or two more than anyone else when it came to points, every single month. I was already engaged in a user documentation process that rewarded me appropriately. It became a running gag that no one had to beat my score to win, they just had to beat a tenth of my score. The scoring system neglected to take my (outlier) time spent writing user documentation into account.</p>
            <p>And this is a funny side effect of most systems of inputs and outputs, something known as the Pareto Principle, or the 80/20 rule. The Pareto Principle states that roughly 80% of effects come from 20% of causes in a system. Now, this is not perfectly true in all cases, of course - there is no exact ratio of specific inputs and outputs that always works out like this in every system. It's meant to illustrate that there are often causes that vastly overpower others, and are responsible for the large majority of results when measuring outputs.</p>
            <p>In this case, in one very particular place, an awful lot of documentation was being created. This one very particular place was my user help documentation portal. I was creating lots of documentation as a natural part of my daily activities. This was completely unrelated to any point system or pressure from outside of my everyday workload. It completely overwhelmed the point system.</p>
            <p>So, lesson one about gamification: if you're going to make a game out of something, make sure that the points are being tallied in a way that makes sense. Some people are doing certain activities far more often than anyone else in the organization, and applying points to these activities is probably meaningless. Instead of giving points to those activities in general, you should get a bit more specific about their application.</p>
            <p>Perhaps they could have only totaled the points towards architecture or other high-level documentation - or only documents tagged with certain category labels - instead of including individual and unplanned efforts in general.</p>
            <p>The second problem this gamification attempt had was one of... breadth.</p>
            <h4>It's Not You, It's Models</h4>
            <p>There are game designers that work in AAA game companies with budgets into the hundreds of millions of dollars per title who can only somewhat effectively "balance" a game properly. The game still requires months or years of real-world use in order to see how the players are actually incentivized and whether there are errors in assigning points. This isn't a failure on their part, either - the human brain can only take into account so much information. The brain can only ever make a model of reality. Reality can always break the model.</p>
            <p>The problem with this example boils down to the total variety of actions that produced the point totals. There was only ever ONE point total tallied up.</p>
            <p>A software developer working on one very difficult feature implementation over the course of a month was having their points totaled up against a business analyst writing user stories. A tier I tech support person was having their points totaled up against a product development team manager.</p>
            <p>How do you assign point values that are supposed to be compared to each other when the actions that create those values are so drastically different in nature? How many user-facing support documents equal one large data migration? How many low-level document edits equal a user story generated from examining support tickets? How many QA tests equal a custom report developed for the CEO's business meeting with a new client?</p>
            <p>This to me was the biggest issue with the gamification effort. How is anyone supposed to make a coherent point system out of these vastly different activities?</p>
            <h4>The Points Don't Matter</h4>
            <p>One method that could have been attempted would have been to normalize the points given based on median or mean time spent in each activity... But that is a LOT of work you would have to do. That's a lot of data you'd have to capture and look through. Take every single ticket in Jira and extract the actual man hours given to them? And all while assuming that the man hours spent were accurate when either estimated or counted when the ticket was marked complete?</p>
            <p>What about the activities that would never even enter a project management tool? I never created tickets for the documentation I created - I just did it. Many other activities were exactly like that, missing from tracking systems.</p>
            <p>And let's say you somehow DO magically normalize all of the points to actual hours spent... Now, you just have points that stand for hours! Why even make points in the first place, when you could simply look at the hours everyone spent!?</p>
            <p>The breadth of the attempt at assigning points to every different activity was the largest issue in the gamification effort. It's like that show Whose Line Is It Anyway? - the points don't matter. In this case, it was because they were describing a huge variety of actions that have no inherent comparability between them.</p>
            <h4>The True Price Of The Game</h4>
            <p>I don't mean for this article to be a big complaint about gamification, but I do want it to describe common issues that a naïve implementation will have. And, unfortunately, in most organizations, you'll end up with a naïve implementation. This is because making good games is actually much more expensive than most people realize - even experienced game designers.</p>
            <p>Unless you have an accurate measure of activity in your organization, there isn't going to be a quantifiable way of setting point values. Full stop. You're going to make a lot of guesses. Gamification can only work if you are able to devote one or more people to a complete full time effort at developing the system. Gamification won't give you the results you think it will if you try to take a mid-level business analyst and have them do it in their spare time, along with their other responsibilities.</p>
            <p>I don't want to only talk down on gamification. I can see a use for it in very limited and specific applications. A sales team composed of people with very similar levels of experience and ability are all on equal footing in their daily requirements and outputs. This is an application that a little gamification can help with, encouraging some competition and likely increasing output. It's small enough to be able to know who the actors are, their daily workflows, and the pool of activity that they engage in. Maybe the gamification can be built around cold call totals? They can all likely agree upon how many cold calls lead to how many sales, roughly, so assigning points to cold calls actually has meaning to them.</p>
            <p>But I can't help but think that this is all a moot point, anyway, right? Results are already quantifiable in that team, aren't they? If Susan makes 10 cold calls and gets 5 sales, and John makes 20 cold calls and gets 5 sales, do you need to gamify cold calls? The thing you are ultimately trying to make are sales, right? Aren't sales the points that you are already measuring? Isn't there already a game being played, that game that I mentioned at the start - employment? Susan is twice as effective as John when you look at cold call totals... but maybe her calls take twice as long. Per hour, maybe they're equals, and each salesperson has optimized to the types of work they do best. John makes twice as many calls and bails out earlier on ones he feels aren't going anywhere. Susan sticks with them anyway and reaps the reward of that extra effort. Or maybe they spend equal time, and Susan is just twice as effective at cold calling. Or maybe Susan actually takes 4 times as long with these calls, and is only half as effective when you normalize sales based on cold call time.</p>
            <p>Look... the details between those two salespersons don't matter with regards to gamifying their work. The entire point is that the values that you need to pay attention to already exist. Those values are how many sales they make in any given time period. They are professionals getting paid to make sales. They know what their numbers mean and they know how to compare those values. They know if one of them is slacking. The social pressure to perform is already there.</p>
            <p>Will gamifying their work squeeze out another 10% efficiency? 5%? 1%? And if it does increase efficiency, is the time and cost spent gamifying worth it? And if it the time and cost ends up being worth it, will they enjoy it? And if they don't enjoy it, will they find another company that doesn't try to manipulate them into performing better with arbitrary point systems?</p>
            <p>You know what I bet would get an extra 10% efficiency out of them, assuming they're not already at max capacity? I bet if you offer them another 5% on their commission they'll perform better. Those are points they can calculate easily. Those are points that directly map to their actions and results. Those are points that offer real incentives to achieve them.</p>
            <h4>Focus On The Real Game</h4>
            <p>There's a game already being played that's called "employment". It's an abstraction built around profit motives and the need to pay for things like food and shelter in the modern economy. It's a well-known game that has been played for thousands of years, so everyone understands the strategies involved. The points can be used to purchase whatever reward you want, too! You don't need to create a new company intranet portal with user authorization. Functionality doesn't need built to use those points to buy an extra day of remote work, or 2 hours of PTO, or tickets to the local cinema, or a gym membership, or a Slack emote. You don't need to invest a developer's time, and a business analyst's time, and HR's time to create it. It's already there.</p>
            <p>Why make another game?</p>
        </article>
    );

};

export default BrokenGamification;