import React from 'react';

import TechDebtQuadrant from './techDebtQuadrants.svg';

const TechnicalDebt = (props) => {

    return (

            <article>
                <h3>Does Technical Debt Exist?</h3>
                <p className='dropcap'>I have heard some arguments in the past that technical debt doesn't actually exist.</p>
                <p>Look at the branding at the top of this page...</p>
                <p>Now, if you can possibly imagine, why, yes! I <b>DO</b> have opinions about this!</p>
                <p><i>Shocking</i>, right?! Let's get into it!</p>
                <h4>A Definition</h4>
                <p className='dropcap'>Let's start by defining the term: <b>technical debt is the benefit of doing something one way in the present, in exchange for the cost of doing it in a different way at some point in the future.</b></p>
                <p>It's super simple. You do something now and it costs less, but in the future, you'll have to change it, and it costs more by that point, because you have to total up all of the combined work you've done. To really solidify the meaning of it in our minds, let's consider this real-world scenario below!</p>
                <h4>An Example</h4>
                <p className='dropcap'>Imagine you are leading a team of people creating a content management system. Let's focus in on one aspect of the system for now.</p>
                <p>This content management system needs to be able to display content. It's right there in the name! Depending on the type of organization you are a part of, you'd go about brainstorming the categories of content you would want to display in various ways. Maybe you're a large organization who has a marketing team, or user experience researchers, capturing data that is informing you as to what your users want. Maybe you're a smaller team without those resources, but in talks with a handful of clients in order to directly tailor your software to their specific needs. Or, maybe you're a solo developer working on a hobby project, or filling out your portfolio. Regardless of how you arrive at your consclusions, you will get there at some point, specifications in hand and <b>ready to get to work.</b></p>
                <p>So, now you start developing these content components to render in your front-end when it asks the back-end for some content to display.</p>
                <p>Let's say you have identified two categories of content that users will want to display - <b>blog posts</b> and <b>image posts</b>. Blog posts are long text entries, and image posts are short entries with an image and a sentence or two of descriptive text below the image.</p>
                <p>Should you create these as their own unique types of components? You could simply make a "blogPost" object and an "imagePost" object of some nature. This seems pretty trivial to push out to production - blog posts have an array of paragraphs to render, and image posts have an image field and a paragraph field rendered immediately after it. Or... should you create a "masterPost" object, with some field "type" that determines how to best render it? Or maybe you could dynamically generate the "masterPost" based on fields that are present in the object, which you then destructure in some way when the content is rendered?</p>
                <p><b>It seems easiest at this point to only have two different types of objects, blogPosts and imagePosts.</b> The specifications were pretty clear from stakeholders after you finished your research. There are all sorts of extra cases you'd have to test if you went with the more generalized masterPost method of storing content, with no real immediate benefit. We have to get this product to market as soon as possible - it needs to be ready for next quarter's marketing plan, which will be going into effect in two months. So, this appears to be an open and shut situation. Let's get these tickets into the queue and assigned, and we'll be done by the end of the next sprint!</p>
                <p>Yet, a month or two later, your stakeholders are now asking you to develop a "recipe post", and a "tutorial post", and a "life event post", and a...</p>
                <p>Well, anyway, you get the picture. <b>Requirements have changed.</b> You <i>need</i> to add these newly-discovered features. While you spent a bit of time making individual types of objects before, it seems like it might make more sense to have that "masterPost" object after all. You can render them in a more dynamic fashion than you currently do. It's a little bit more work, but <b>it makes a lot of sense, now.</b> And one of the biggest benefits will be <b>future-proofing your design</b>, so that when new types of content are requested, it's as easy as adding new rendering methods for new fields.</p>
                <p>Originally, you spent two weeks building out your separate post categories. It's been in production only for a month or so, but enough users have generated enough data that you now have to take that data and convert it to the new masterPost format. (Don't you even <b>THINK</b> about leaving them as is, and building out unique rendering cases for data of a certain age! Don't you <b>DARE!</b>) And of course you still need to build out the functionality for masterPosts. Converting the user data will have to wait until that's ready and tested. What should have taken a month, if you had simply future-proofed from the start, is now going to take two additional months. It's even going to stretch past the start of the new marketing campaign, so the marketing team has to delay their activity for another month. In total, you've now spent about three months on this part of the overall project, when <b>a little foresight at the beginning could have cut that time by about two thirds!</b></p>
                <h4>So, This Isn't A Myth, Right?</h4>
                <p className='dropcap'>Is this REALLY technical debt? Are changing requirements technical debt? Who is responsible for this "failure"?</p>
                <p>(<b>Hint:</b> it isn't really a failure. It's the nature of an organization doing business. <b>Hindsight is 20/20.</b>)</p>
                <p>This is a tough topic to construct arguments around, for sure. It seems like there were many competing forces that went into this decision-making process that led to your suboptimal use of development resources. You could have been fixing known bugs this whole time!</p>
                <p>No matter what the exact cause of this design flaw, rest assured, all parties involved will be pointing fingers at the others. The user research team didn't ask the right questions! The development team didn't argue for future-proofing the product design well enough! The marketing team's schedule holds too much power over the product team's work prioritization! Who can even predict changing user demands, anyway? The CTO golfs too much and isn't managing the interplay between these groups and the personalities involved!</p>
                <p>Alright, enough with the finger pointing! <b>Technical debt isn't owned by any particular group of people.</b> Your entire organization owns it! It's a debt incurred because of the natural inefficiencies and shortcomings of the flawed creatures we call humans, as they interact with each other within an organization's framework.</p>
                <p>Actual, meaningful communication and trust in expertise between the different groups within the organization is key to battling technical debt. While every company is unique, they all share one thing in common, no matter how well they do - the people within the organization can be more open with each other about their projects and their actual requirements. Each business is going to have unique demands and idiosyncracies that need addressed, changing the nature of the discussion that should be had. In the example above, I think the development team should have tried to argue as strongly as possible that they needed a bit of extra time to introduce a more robust design that would allow for greater flexibility in the future. Changing user demands is a well-known and recurring theme in product development, and it is to be expected - especially so if the members of the team were actually <b>familiar with their user base.</b></p>
                <p>Many far more intelligent people than I have tried to tackle this topic. <b>Martin Fowler</b> has influenced a lot of my ideas surrounding technical debt. He wrote a great <a href='https://martinfowler.com/bliki/TechnicalDebtQuadrant.html'>blog post</a> years ago about his idea of "<b>technical debt quadrants</b>".</p>
                <img className='illustration-medium' src={TechDebtQuadrant} alt='Technical Debt Quadrant Illustration' />
                <p>Martin describes technical debt as falling into one of the four quadrants shown in this graph. Read his post above for a great and fairly concise explanation of them.</p>
                <p>I find that the "prudent" column might be better conceived of as "<b>inevitable</b>". Technical debt that arises in this section of the graph implies that there is almost nothing that you can do about it. If it was a prudent and deliberate decision, then that was the best choice possible given the constraints, and thus, it was inevitable. If it was a prudent but inadvertent decision, then no one involved could have seen the proper solution at the time, and thus, it was inevitable.</p>
                <p>I do wish that these axes were understood by more than just the development team. I mean... <b>they aren't even universally considered IN the development team!</b> Developers familiar with the concept of technical debt - especially if they have useful visual methods of describing the issue like the graph above - should be advocates for discussion about this organizational design debt. This is an excellent way of looking at product design and development trade-offs that every part of an organization can benefit from. And, if more members of an organization considered these trade-offs, which are often made when teams within an organization negotiate their requirements with each other, we might be able to finally get our addiction to technical debt under control. <b>Maybe we'd have a lot less "inevitable" debt to pay down in the future.</b></p>
                <h4>The Takeaway</h4>
                <p className='dropcap'>Talk to each other about technical debt and how you should handle it, before it shows up. <b>Talk to non-developers about how re-writing your code is a very expensive waste of resources</b> - not just due to the actual salaries of technical people, but also the <b>opportunity costs</b> of stalled business elements and efforts while the work gets recreated, over and over again. <b>Technical debt definitely exists</b>, for a variety of reasons, and it won't be going away any time soon by ignoring it. Ignoring it is the reason that so much "inadvertent" technical debt exists in the first place!</p>
            </article>

    );

};

export default TechnicalDebt;